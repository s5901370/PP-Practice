#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <omp.h>
#define endl printf("\n")
#define get(A,i,j) A[i-1][j-1]+A[i-1][j]+A[i-1][j+1]+A[i][j-1]+A[i][j+1]+A[i+1][j-1]+A[i+1][j]+A[i+1][j+1]
#define MAXM 1005
#define MAXN 2005
int N,M;
char aa[MAXN][MAXN];
char bb[MAXN][MAXN];
// do not arr[2][MAXN][MAXN]

int main(int argc, char const *argv[])
{
	// omp_set_num_threads(6);
	while(scanf("%d %d\n",&N,&M) == 2){
		char line[MAXN];
		// memset(arr,0,sizeof(arr));
		int a = 0;
		for(int i=1;i<=N;++i){
			// scanf("%s",line);
			// gets(line);
			fgets(line,MAXN,stdin);
			// #pragma omp parallel for
			for(int j=1;j<=N;++j)
				aa[i][j] = line[j-1]-'0';
		}
		// for(int i=0;i<N;++i){
		// 	for(int j=0;j<N;++j)
		// 		printf("%c",aa[i*N+j]);
		// 	endl;
		// }
		//memset(aa,0,sizeof(aa));
		for(int k=0;k<M;++k){
			#pragma omp parallel for schedule(static, N/omp_get_max_threads())
			for(int i=1;i<=N;++i){
			// #pragma omp parallel for schedule(static, 32)
				// for(int k=1;k<=N;++k){
					// int ret = get(aa,j,k);
				int adj,j=1;
					#define UNLOOP { \
					adj = aa[i-1][j-1] + aa[i-1][j] + aa[i-1][j+1] + \
						aa[i  ][j-1] + aa[i  ][j+1] + \
						aa[i+1][j-1] + aa[i+1][j] + aa[i+1][j+1]; \
					bb[i][j] = (aa[i][j] == 0 && adj == 3) || \
									(aa[i][j] == 1 && (adj == 2 || adj == 3)); j++; \
					}
				#define UNLOOP4 {UNLOOP UNLOOP UNLOOP UNLOOP}
				#define UNLOOP8 {UNLOOP4 UNLOOP4}
				for (; j + 8 <= N; )
					UNLOOP8;
				for (; j <= N; )
					UNLOOP;
					// int dead = 0;
					// if(aa[j][k] == 1){
					// 	if((ret == 2) || (ret == 3))
					// 		dead = 1;
					// 	else{
					// 		dead = 0;
					// 	}
					// }
					// else if(aa[j][k] == 0){
					// 	if(ret == 3)
					// 		dead = 1;
					// 	else
					// 		dead = 0;
					// }
					// bb[j][k] = (aa[j][k] == 1 && (ret == 2 || ret == 3) )
					// || (aa[j][k] == 0 && ret == 3);
					
				// }
			}
			#pragma omp parallel for schedule(static, N/omp_get_num_threads())
			for(int i=1;i<=N;++i)
				memcpy(aa[i],bb[i],N+1);
			// a = 1-a;
		}

		for(int i=1;i<=N;++i){
			// #pragma omp parallel for
			for(int j=1;j<=N;++j)
				aa[i][j] += '0';
			aa[i][N+1] = 0;
				// printf("%d",aa[i][j]);
			puts(aa[i]+1);
		}
		// printf("HERE\n");
		// printf("%d\n",arr[0]);
		// printf("%d\n",arr[0]);
	}
	
	

	return 0;
}
